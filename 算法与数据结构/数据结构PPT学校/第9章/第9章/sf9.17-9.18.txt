//--开放定址哈希表的存储结构
int  hashsize[]={997, ... };   //哈希表容量递增表，一个合适的素数序列
typedef struct {
     elemtype   *elem;              //数据元素存储地址
     int             count;              //当前数据元素个数
     int             sizeindex;        //hashsize[sizeindex]为当前容量
}hashTable;
#define  SUCCESS  1
#define  UNSUCCESS  0
#define  DUPLICATE  -1

Status  SearchHash(HashTable H, KeyType K, int &p, int &c)
{   //c--计冲突次数，其初值=0，查找成功，p指向找到数据元素在
     //表中的位置，不成功，指向插入位置
     p=Hash(K);
     while (H.elem[p].key!=NULLKEY && !EQ(K,H.elem[p].key))
            collision(p, ++c);        //探测下一地址
     if EQ(K, H.elem[p].key)
           return SUCCESS;
     else  return UNSCCESS;
}//SearchHash

Status  InsertHash(HashTable &H,ElemType e)
{  //找不到，插入元素e，返回OK，若冲突次数多时重建Hash表
      c=0;
      if (HashSearch(H, e.key, p, c))
             return DUPLICATE;
      else  if (c<Hashsize[H.sizeindex]/2)  //冲突次数未达到上限
                     { H.elem[p]=e;  ++count;  return OK;}
              else  RecreatHashTable(H);
}//InsertHash
