Status ToplogicalOrder(ALGraph G, Stack &T)   //算法7.13
{   //有向网G采用邻接表存储结构，求各顶点事件的最早发生时间ve
    //T为拓扑序列顶点栈，S为零入度顶点栈
    //若G无回路，则栈T返回G的一个拓扑序列，且函数值为OK，否ERR
    FindInDegree(G, indegree);  //对各顶点求入度indegree[0..vernum-1]
    InitStack(S);               //建零入度顶点栈S
    for (i=0; i<G.vexnum; ++i)
          if (!indegree[i]) push(S, i);
    InitStack(T); count=0; ve[0..G.vexnum-1]=0; //初始化各顶点最早开始时间
    while (!StackEmpty(S))
          { Pop(S, j); Push(T, j); ++count;     //j号顶点入T栈并计数
            for (p=G.vertices[j].firstarc; p; p=p->nextarc)  //p指向j的链头结点
             { k=p>adjvex;  //邻接点下标,对j号顶点的每个邻接点的入度减1
               if(--indegree[k]==0) 
                  Push(S, k);  //如入度减为0，则入栈
               if(ve[j]+*(p->info)>ve[k]) 
                    ve[k]=ve[j]+*(p->info);//求最长路径
             }//for  *(p->info)=dut(<j,k>)
          }//while
    if(count<G.vexnum) return ERROR;   //该有向网有回路
    else return OK;
}//ToplogicalOrder