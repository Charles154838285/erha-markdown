void  ShortestPath_DIJ(MGraph G,int v0,PathMatrix &P,ShortPathTable &D)
{  //用Dijkstra算法求有向网G的v0顶点到其余顶点v的最短路径P[v]及带权    //长度D[v],若P[v][w]为真，则w是从v0到v当前求得最短路径上的顶点
   //final[v]为真当且仅当v属于S，即已经取得从v0到v的最短路径
    for (v=0; v<G.vexnum; ++v)    //对每个结点相关变量初始化
          { final[v]=FALSE;  D[v]=G.arcs[v0][v];      //v0到v有弧则赋权值
            for (w=0; w<G.vexnum; ++w)                //设空路径
                  P[v][w]=FALSE;                                 //v到w无路径   
            if (D[v]<INFINITY)                                 //判v到v0有无路径
                { p[v][v0]=TRUE; P[v][v]=TRUE;}
           }//for
    D[v0]=0;  final[v0]=TRUE;                           //初始化，v0顶点属于S集
    //开始主循环，每次求得v0到某个v顶点的最短路径，并加v到S集
    for (i=0; i<G.vexnum; ++i)                  //其余G.vexmun-1个顶点
          { min=INFINITY;                            //当前所知离v0最近的距离
             for (w=0; w<G.vexnum; ++w)    //找{min D[w]}
                    if (!final[w])                             //如果w没并入S
                        if (D[w]<min)                 //w顶点离v0顶点更近
                            { v=w;  min=D[w];}
             final[v]=TRUE;                          //离v0最近的v加入S集
             for (w=0; w<G.vexnum;++w)     //更新当前最短路径及距离
                    if (!final[w] &&(min+G.arcs[v][w]<D[w]))   //修改D[w]和P[w]
                       { D[w]=min+G.arcs[v][w];
                          P[w]=P[v];   P[w][w]=TRUE;
                       }
           }
}
