void MiniSpanTree_PRIM(MGraph G, VertexType u)
{   //用普里姆算法从第u个顶点出发构造网G的最小生成树T，输出T各边
    //记录从顶点集U到V-U的代价最小的边的辅助数组定义
    // struct  {
    //      VertexType   adjvex;
    //      VRType         lowcost;
    //  }closedge[MAX_VERTEX_NUM];
    k=LocateVex(G,u);
    for (j=0; j<G.vexnum; j++)       //辅助数组初始化
         if (j!=k)  closedge[j]={u, G.arcs[k][j].adj};  //{adjvex, lowcost}
    closedge[k].lowcost=0;              //初始化，U={u}
    for (i=0; i<G.vexnum; i++)      //选择其余G.vexnum-1个顶点
         {  k=minimum(closedge);    //选权最小的边，对应顶点的位置号k
             //此时closedge[k].lowcost=
             //                MIN{closedge[vi].lowcost | closedge[vi].lowcost>0,vi属V-U}
            printf(closedge[k].adjvex, G.vexs[k]);   //输出生成树的边
            closedge[k].lowcost=0;                             //第k顶点并入U集，置标志0
            for (j=0; j<G.vexnum; j++)
                 if (G.arcs[k][j].adj<closedge[j].lowcost)      //新顶点并入U后，
                     closedge[j]=G.vexs[k],G.arcs[k][j].adj;   //重选最小边
         }
}//MiniSpanTree